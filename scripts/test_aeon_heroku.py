#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã √ÜON –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ Heroku
"""

import sys
import os
import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Heroku
HEROKU_URL = "https://qip-aeon-dev-95ccf5155d46.herokuapp.com"
API_BASE_URL = HEROKU_URL
AEON_BASE_URL = f"{API_BASE_URL}/api/aeon"

def test_aeon_interview():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ √ÜON –∏–Ω—Ç–µ—Ä–≤—å—é"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ √ÜON –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ Heroku")
    print("=" * 50)
    
    # 1. –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
    print("\n1Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é...")
    start_response = requests.post(
        f"{AEON_BASE_URL}/start_interview",
        json={
            "user_name": "Test User", 
            "user_email": "test@example.com"
        }
    )
    
    if start_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–Ω—Ç–µ—Ä–≤—å—é: {start_response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {start_response.text}")
        return
    
    start_data = start_response.json()
    session_id = start_data["data"]["session_id"]
    question = start_data["data"]["question"]
    
    print(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∞—Ç–æ")
    print(f"üìù Session ID: {session_id}")
    print(f"‚ùì –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: {question}")
    
    # 2. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    test_answers = [
        "Je suis passionn√© par l'innovation et la cr√©ation de solutions qui ont un impact positif. Dans le travail, j'aime collaborer avec des √©quipes talentueuses et r√©soudre des d√©fis complexes. Dans la vie, mes valeurs fondamentales sont l'int√©grit√©, la croissance personnelle et la contribution √† quelque chose de plus grand que moi.",
        
        "Dans une situation complexe sans instructions claires, j'ai d'abord analys√© le contexte et identifi√© les objectifs principaux. J'ai ensuite cr√©√© un plan d'action flexible, en restant ouvert aux ajustements. Je suis plut√¥t strat√®ge, mais j'appr√©cie aussi l'improvisation quand c'est n√©cessaire pour s'adapter rapidement.",
        
        "Je veux laisser une culture d'innovation et de collaboration dans l'√©quipe. Si j'avais une libert√© totale, je cr√©erais une plateforme qui utilise l'IA pour d√©mocratiser l'acc√®s √† l'√©ducation et aux opportunit√©s professionnelles, en connectant les talents avec les bonnes opportunit√©s.",
        
        "Ma derni√®re erreur importante √©tait de ne pas communiquer suffisamment avec l'√©quipe sur un changement de direction. J'ai appris l'importance de la transparence et de la communication proactive. J'ai agi √† la limite de mes capacit√©s lors d'un projet critique o√π j'ai d√ª apprendre une nouvelle technologie en une semaine - c'√©tait intense mais tr√®s enrichissant.",
        
        "Je m'imagine comme un catalyseur d'innovation chez Quantum Insight, contribuant √† d√©velopper des solutions qui repoussent les limites de ce qui est possible. J'am√©liorerais en priorit√© notre syst√®me de feedback et de d√©veloppement continu, en cr√©ant des m√©canismes pour identifier et d√©velopper les talents cach√©s."
    ]
    
    for i, answer in enumerate(test_answers, 1):
        print(f"\n{i}Ô∏è‚É£ –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å {i}...")
        print(f"üí¨ –û—Ç–≤–µ—Ç: {answer[:100]}...")
        
        answer_response = requests.post(
            f"{AEON_BASE_URL}/answer",
            json={
                "session_id": session_id,
                "answer": answer
            }
        )
        
        if answer_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {answer_response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {answer_response.text}")
            return
        
        answer_data = answer_response.json()
        
        if answer_data["data"]["is_completed"]:
            print("‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –û—Ç—á–µ—Ç: {answer_data['data']['report']['archetype']}")
            break
        else:
            next_question = answer_data["data"]["next_question"]
            print(f"‚ùì –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {next_question}")
    
    # 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
    print(f"\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏...")
    status_response = requests.get(f"{AEON_BASE_URL}/session/{session_id}/status")
    
    if status_response.status_code == 200:
        status_data = status_response.json()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {status_data['data']['status']}")
        print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {status_data['data']['current_question']}/{status_data['data']['total_questions']}")
    
    # 4. –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
    print(f"\n4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç...")
    report_response = requests.get(f"{AEON_BASE_URL}/session/{session_id}/report")
    
    if report_response.status_code == 200:
        report_data = report_response.json()
        print("‚úÖ –û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
        print(f"   üé≠ –ê—Ä—Ö–µ—Ç–∏–ø: {report_data['data']['archetype']}")
        print(f"   üß† –í–µ–∫—Ç–æ—Ä —Å–æ–∑–Ω–∞–Ω–∏—è: {report_data['data']['consciousness_vector']}")
        print(f"   üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {report_data['data']['motivation_score']:.2f}")
        print(f"   ü§ù –°–∏–Ω–µ—Ä–≥–∏—è: {report_data['data']['synergy_score']:.2f}")
        print(f"   üîÑ –ì–∏–±–∫–æ—Å—Ç—å: {report_data['data']['flexibility_score']:.2f}")
        print(f"   üéØ –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {report_data['data']['independence_score']:.2f}")
        print(f"   üöÄ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å: {report_data['data']['adaptability_score']:.2f}")
    
    # 5. –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ JSON
    print(f"\n5Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ JSON...")
    download_response = requests.get(f"{AEON_BASE_URL}/download_report/{session_id}")
    
    if download_response.status_code == 200:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        filename = f"aeon_report_heroku_{session_id[:8]}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(download_response.text)
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ
        try:
            report_json = json.loads(download_response.text)
            print(f"üìÑ –†–∞–∑–º–µ—Ä –æ—Ç—á–µ—Ç–∞: {len(download_response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üé≠ –ê—Ä—Ö–µ—Ç–∏–ø: {report_json.get('archetype', 'N/A')}")
            print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {report_json.get('created_at', 'N/A')}")
        except json.JSONDecodeError:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç—á–µ—Ç")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {download_response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {download_response.text}")

def test_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API –Ω–∞ Heroku...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API Heroku.")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ √ÜON Interview System –Ω–∞ Heroku")
    print("=" * 50)
    print(f"üåê URL: {HEROKU_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
    if not test_api_health():
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ Heroku")
        print("   2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print("   3. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    try:
        test_aeon_interview()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: {HEROKU_URL}")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    main() 